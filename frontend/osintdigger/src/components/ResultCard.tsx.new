import React, { useState, useEffect, useMemo } from "react";
import { ExternalLink, RefreshCw, Info, AlertTriangle } from "lucide-react";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  CardDescription,
  CardFooter
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import GoogleSearchSuggestion from "./GoogleSearchSuggestion";
import "./GoogleSearchSuggestion.css";
import axios from "axios";
import { Source } from '@/types';

// Import the custom hook and types
import { useNROListed, MatchLevel, MatchResult, NROListedEntity } from '@/hooks/useNROListed';
import SourceList from './SourceList';

// 定义结果卡片的属性接口
interface ResultCardProps {
  result: {
    risk_item: string;
    relationship_type: string;
    finding_summary: string;
    potential_intermediary_B?: string | string[] | null;
    institution_a?: string;
    institution_c?: string;
    target_institution_name?: string;
    sources?: Source[]; 
    // Google 搜索建议相关字段 - 新格式
    search_metadata?: {
      rendered_content?: string;
      search_queries?: string[];
    };
    // 兼容旧格式
    rendered_content?: string;
    search_queries?: string[];
  };
}

// 错误边界组件
class ErrorBoundary extends React.Component<{children: React.ReactNode}, {hasError: boolean}> {
  constructor(props: {children: React.ReactNode}) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("ResultCard error boundary caught error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <Card className="w-full">
          <CardHeader>
            <CardTitle className="text-xl">结果显示错误</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-500">显示此结果时出错。数据可能包含格式问题。</p>
            <Button 
              variant="outline" 
              onClick={() => this.setState({ hasError: false })}
              className="mt-2"
            >
              重试
            </Button>
          </CardContent>
        </Card>
      );
    }

    return this.props.children;
  }
}

// 安全地处理文本内容
const sanitizeText = (text: string | string[] | null | undefined): string | string[] => {
  // 增强空值检查
  if (text === null || text === undefined) {
    console.log('sanitizeText received null or undefined value');
    return "";
  }
  
  // 如果是数组，对每个元素进行处理
  if (Array.isArray(text)) {
    return text.map(item => {
      // 对数组中的每个元素也进行空值检查
      if (item === null || item === undefined) {
        return "";
      }
      return sanitizeText(item) as string;
    });
  }
  
  try {
    // 确保文本是字符串类型
    if (typeof text !== 'string') {
      console.log(`sanitizeText received non-string value of type ${typeof text}:`, text);
      return String(text); // 将非字符串值转换为字符串
    }
    
    // 返回处理后的文本
    return text;
  } catch (error) {
    console.error("Error sanitizing text:", error);
    return "Error processing text";
  }
};

// 结果卡片组件
const ResultCard = ({ result: initialResult }: ResultCardProps) => {
  // 使用NRO列表检查功能
  const { 
    checkMultipleEntities, 
    isDefiniteMatch, 
    isLoading: isNROListLoading 
  } = useNROListed();
  
  // 添加错误状态和验证后的结果状态
  const [hasError, setHasError] = useState(false);
  const [validatedResult, setValidatedResult] = useState<ResultCardProps['result'] | null>(null);
  
  // 验证和预处理数据
  useEffect(() => {
    try {
      // 确保 initialResult 是一个有效的对象
      if (!initialResult || typeof initialResult !== 'object') {
        console.error("Invalid result object received:", initialResult);
        setHasError(true);
        return;
      }
      
      // 创建安全的结果对象副本
      const safeResult = { ...initialResult };
      
      // 安全地处理 risk_item
      if (typeof safeResult.risk_item !== 'string') {
        console.warn("Invalid risk_item, using fallback:", safeResult.risk_item);
        safeResult.risk_item = String(safeResult.risk_item || "Unknown Risk Item");
      }
      
      // 安全地处理 relationship_type
      if (typeof safeResult.relationship_type !== 'string') {
        console.warn("Invalid relationship_type, using fallback:", safeResult.relationship_type);
        safeResult.relationship_type = String(safeResult.relationship_type || "Unknown Relationship");
      }
      
      // 安全地处理 finding_summary
      if (safeResult.finding_summary) {
        if (typeof safeResult.finding_summary === 'string') {
          // 检查可能导致问题的括号
          if (safeResult.finding_summary.includes('[')) {
            console.warn("Finding summary contains potentially problematic brackets:", 
                        safeResult.finding_summary.substring(0, 100));
          }
        } else {
          console.warn("Invalid finding_summary, using fallback:", safeResult.finding_summary);
          safeResult.finding_summary = String(safeResult.finding_summary || "No finding summary available");
        }
      }
      
      // 安全地处理 potential_intermediary_B
      if (safeResult.potential_intermediary_B !== undefined && 
          safeResult.potential_intermediary_B !== null) {
        if (!Array.isArray(safeResult.potential_intermediary_B) && 
            typeof safeResult.potential_intermediary_B !== 'string') {
          console.warn("Invalid potential_intermediary_B, converting to string:", 
                      safeResult.potential_intermediary_B);
          safeResult.potential_intermediary_B = String(safeResult.potential_intermediary_B);
        }
      }
      
      // 设置验证后的结果
      setValidatedResult(safeResult);
      setHasError(false);
    } catch (error) {
      console.error("Error validating result data:", error);
      setHasError(true);
    }
  }, [initialResult]);
  
  // 如果发生错误或数据验证中，显示降级UI
  if (hasError || !validatedResult) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-xl">{initialResult?.risk_item || "Unknown Risk Item"}</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-red-500">显示此结果时出错。数据可能包含格式问题。</p>
          <Button 
            variant="outline" 
            onClick={() => {
              setHasError(false);
              // 重新尝试验证数据
              if (!validatedResult && initialResult) {
                setValidatedResult({...initialResult});
              }
            }}
            className="mt-2"
          >
            重试
          </Button>
        </CardContent>
      </Card>
    );
  }
  
  // 使用验证后的数据
  const result = validatedResult;
  
  // 检查所有相关实体是否在NRO列表中
  const riskItemNROListedResults = useMemo(() => {
    return checkMultipleEntities(result.risk_item);
  }, [checkMultipleEntities, result.risk_item]);
  
  const intermediaryNROListedResults = useMemo(() => {
    // 如果是数组，将其转换为逗号分隔的字符串
    const intermediary = Array.isArray(result.potential_intermediary_B) 
      ? result.potential_intermediary_B.join(', ')
      : result.potential_intermediary_B;
    
    return intermediary ? checkMultipleEntities(intermediary) : [];
  }, [checkMultipleEntities, result.potential_intermediary_B]);
  
  // 检查 Institution A
  const institutionANROListedResults = useMemo(() => {
    return result.institution_a ? checkMultipleEntities(result.institution_a) : [];
  }, [checkMultipleEntities, result.institution_a]);
  
  // 检查 Target Institution Name
  const targetInstitutionNROListedResults = useMemo(() => {
    return result.target_institution_name ? checkMultipleEntities(result.target_institution_name) : [];
  }, [checkMultipleEntities, result.target_institution_name]);
  
  // 整合所有检查结果
  const allNROListedResults = useMemo(() => {
    return [
      ...riskItemNROListedResults.map(check => ({ entity: 'Risk Item', check })),
      ...intermediaryNROListedResults.map(check => ({ entity: 'Intermediary', check })),
      ...institutionANROListedResults.map(check => ({ entity: 'Institution A', check })),
      ...targetInstitutionNROListedResults.map(check => ({ entity: 'Target Institution', check }))
    ];
  }, [
    riskItemNROListedResults, 
    intermediaryNROListedResults, 
    institutionANROListedResults, 
    targetInstitutionNROListedResults
  ]);
  
  // 分离确定匹配和可能匹配
  const definiteMatches = useMemo(() => {
    return allNROListedResults.filter(item => isDefiniteMatch(item.check.matchLevel));
  }, [allNROListedResults, isDefiniteMatch]);
  
  const possibleMatches = useMemo(() => {
    return allNROListedResults.filter(
      item => item.check.isNROListed && !isDefiniteMatch(item.check.matchLevel)
    );
  }, [allNROListedResults, isDefiniteMatch]);
  
  // 判断是否有NRO列表实体
  const hasNROListedEntities = definiteMatches.length > 0 || possibleMatches.length > 0;
  
  // 获取匹配的NRO列表实体信息
  const matchedNROListedEntity = hasNROListedEntities 
    ? definiteMatches[0]?.check.matchedEntity 
    : (possibleMatches.length > 0 ? possibleMatches[0]?.check.matchedEntity : undefined);
  
  // 调试日志
  console.log(`【调试 ResultCard】risk_item: ${result.risk_item}`);
  
  // 使用错误边界包裹组件
  return (
    <ErrorBoundary>
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-xl">{result.risk_item}</CardTitle>
          {/* 条件渲染NRO Listed实体标签 */}
          {hasNROListedEntities && (
            <div className="mt-1">
              <Dialog>
                <DialogTrigger asChild>
                  <span className="inline-flex items-center rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20 cursor-pointer hover:bg-yellow-100 transition-colors">
                    <div className="flex items-center">
                      <AlertTriangle className="h-3 w-3 mr-1" />
                      {definiteMatches.length > 0 ? "NRO Listed Entity" : "Possible NRO Listed Match"}
                    </div>
                  </span>
                </DialogTrigger>
                <DialogContent className="sm:max-w-md max-h-[80vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle className="text-yellow-800 flex items-center">
                      <AlertTriangle className="h-5 w-5 mr-2 text-yellow-600" />
                      NRO Listed Entities Found
                    </DialogTitle>
                    <DialogDescription>
                      {definiteMatches.length + possibleMatches.length} NRO listed {definiteMatches.length + possibleMatches.length === 1 ? 'entity' : 'entities'} found
                    </DialogDescription>
                  </DialogHeader>
                  
                  <div className="mt-4 space-y-6">
                    {/* 确定匹配部分 */}
                    {definiteMatches.length > 0 && (
                      <div>
                        <h3 className="text-sm font-semibold mb-2 bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                          Confirmed Matches
                        </h3>
                        <div className="space-y-3">
                          {definiteMatches.map((item, index) => (
                            <Card key={`definite-${index}`} className="border-yellow-300">
                              <CardHeader className="pb-2">
                                <CardTitle className="text-base flex items-center">
                                  <span className="bg-yellow-100 text-yellow-800 text-xs font-medium mr-2 px-2 py-0.5 rounded">
                                    {item.entity}
                                  </span>
                                  <span className="text-sm">{item.check.entityName}</span>
                                  <span className="ml-auto text-xs bg-yellow-50 text-yellow-600 px-1 py-0.5 rounded">
                                    {item.check.matchLevel === MatchLevel.EXACT ? 'Exact' : 
                                     item.check.matchLevel === MatchLevel.ALIAS ? 'Alias' : 
                                     item.check.matchLevel === MatchLevel.ACRONYM ? 'Acronym' : ''}
                                  </span>
                                </CardTitle>
                              </CardHeader>
                              <CardContent className="pt-0">
                                <div className="border-t border-yellow-100 pt-2 mt-1">
                                  <p className="text-sm font-medium mb-1">Matched with: {item.check.matchedEntity?.name}</p>
                                  
                                  {item.check.matchedEntity?.aliases && item.check.matchedEntity.aliases.length > 0 && (
                                    <div className="mt-2">
                                      <p className="text-xs font-medium text-gray-500 mb-1">Known Aliases:</p>
                                      <ul className="list-disc pl-4 space-y-0.5">
                                        {item.check.matchedEntity.aliases.map((alias, aliasIndex) => (
                                          <li key={aliasIndex} className="text-xs text-gray-700">{alias}</li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {/* 可能匹配部分 */}
                    {possibleMatches.length > 0 && (
                      <div>
                        <h3 className="text-sm font-semibold mb-2 bg-gray-100 text-gray-800 px-2 py-1 rounded">
                          Possible Matches
                        </h3>
                        <div className="space-y-3">
                          {possibleMatches.map((item, index) => (
                            <Card key={`possible-${index}`} className="border-gray-200">
                              <CardHeader className="pb-2">
                                <CardTitle className="text-base flex items-center">
                                  <span className="bg-gray-100 text-gray-800 text-xs font-medium mr-2 px-2 py-0.5 rounded">
                                    {item.entity}
                                  </span>
                                  <span className="text-sm">{item.check.entityName}</span>
                                </CardTitle>
                              </CardHeader>
                              <CardContent className="pt-0">
                                <div className="border-t border-gray-100 pt-2 mt-1">
                                  <p className="text-sm font-medium mb-1">Possibly related to: {item.check.matchedEntity?.name}</p>
                                  
                                  {item.check.matchedEntity?.aliases && item.check.matchedEntity.aliases.length > 0 && (
                                    <div className="mt-2">
                                      <p className="text-xs font-medium text-gray-500 mb-1">Known Aliases:</p>
                                      <ul className="list-disc pl-4 space-y-0.5">
                                        {item.check.matchedEntity.aliases.map((alias, aliasIndex) => (
                                          <li key={aliasIndex} className="text-xs text-gray-700">{alias}</li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          )}
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm font-medium">
            Relationship Type: {result.relationship_type}
          </p>
          
          {result.potential_intermediary_B && (
            <div className="text-sm font-medium">
              <p>Potential Intermediary:</p>
              {Array.isArray(result.potential_intermediary_B) ? (
                <ul className="list-disc pl-5 mt-1 space-y-1">
                  {result.potential_intermediary_B.map((item, index) => (
                    <li key={index}>{item}</li>
                  ))}
                </ul>
              ) : (
                <p className="mt-1">{result.potential_intermediary_B}</p>
              )}
            </div>
          )}

          <p className="text-sm text-muted-foreground mt-4">
            {result.finding_summary ? 
              sanitizeText(result.finding_summary) : 
              "No finding summary available"
            }
          </p>
          
          {/* Google 搜索建议组件 */}
          <div className="mt-4 w-full flex justify-center">
            <div className="w-full max-w-full overflow-hidden">
              <GoogleSearchSuggestion 
                renderedContent={
                  (result.search_metadata && result.search_metadata.rendered_content) || 
                  result.rendered_content
                } 
                searchQueries={
                  (result.search_metadata && result.search_metadata.search_queries) || 
                  result.search_queries
                } 
              />
            </div>
          </div>

          {/* 渲染来源列表组件 */}
          <SourceList sources={result.sources} riskItem={result.risk_item} />
        </CardContent>
      </Card>
    </ErrorBoundary>
  );
};

export default ResultCard;
